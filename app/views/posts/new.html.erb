<div class="container mt-5" style="max-width: 500px;">
  <div class="card shadow rounded-4">
    <div class="card-body">
      <h4 class="card-title text-center mb-4">新しい投稿</h4>

      <%= form_with(model: @post, local: true, html: { multipart: true }) do |form| %>

        <% if @post.errors.any? %>
          <div class="alert alert-danger rounded-3">
            <h5>入力にエラーがあります:</h5>
            <ul class="mb-0">
              <% @post.errors.full_messages.each do |msg| %>
                <li><%= msg %></li>
              <% end %>
            </ul>
          </div>
        <% end %>

        <!-- 写真 -->
        <div class="mb-3">
          <%= form.label :image, "写真", class: "form-label" %>
          <%= form.file_field :image, class: "form-control" %>
        </div>

        <!-- 日時 -->
        <div class="mb-3">
          <%= form.label :fishing_date, "釣行日時", class: "form-label" %>
          <%= form.datetime_field :fishing_date, class: "form-control" %>
        </div>

        <!-- 魚種 -->
        <div class="mb-3">
          <%= form.label :fish_name, "魚種", class: "form-label" %>
          <%= form.text_field :fish_name, class: "form-control", placeholder: "例：スズキ" %>
        </div>


        <!-- サイズ -->
        <div class="mb-3">
          <%= form.label :fish_size, "サイズ（cm）", class: "form-label" %>
          <%= form.number_field :fish_size, class: "form-control", step: 0.1 %>
        </div>

        <!-- 天気（セレクトボックス） -->
        <div class="mb-3">
          <%= form.label :weather, "天気", class: "form-label" %>
          <%= form.select :weather, Post.weathers.keys.map { |w| [I18n.t("weather.#{w}"), w] }, {}, { class: "form-select" } %>
        </div>

        <!-- 気温（数値入力） -->
        <div class="mb-3">
          <%= form.label :temperature, "気温（℃）", class: "form-label" %>
          <%= form.number_field :temperature, class: "form-control", step: 1 %>
        </div>

        <!-- メモ -->
        <div class="mb-3">
          <%= form.label :memo, "メモ", class: "form-label" %>
          <%= form.text_area :memo, class: "form-control", rows: 3, placeholder: "自由にメモを書いてください" %>
        </div>

        <!-- 場所 -->
        <div class="mb-3">
          <%= form.label :spot_detail, "釣り場（地名）", class: "form-label" %>
          <%= form.text_field :spot_detail, class: "form-control", placeholder: "例：長崎県五島列島田の浦港" %>
        </div>

        <%= form.hidden_field :latitude, id: 'latitude' %>
        <%= form.hidden_field :longitude, id: 'longitude' %>

        <%= "場所を選択してください。" %>
        <div id="new-map" style="height: 400px; width: 100%;"></div>

        <%= form.hidden_field :status, value: "post" %>

        <div class="d-flex justify-content-center gap-2">
          <button type="submit" name="commit_type" value="post" class="btn btn-primary rounded-pill px-4">
            投稿する
          </button>
          <button type="submit" name="commit_type" value="record" class="btn btn-warning rounded-pill px-4">
            記録する
          </button>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
  let map;
  let marker;

  function initializeMap(centerPosition) {
    const mapElement = document.getElementById("new-map");
    if (!mapElement) return; // mapが存在しないページでは何もしない

    map = new google.maps.Map(mapElement, {
      center: centerPosition,
      zoom: 10,
    });

    // すでに保存された緯度経度があればマーカーを立てる
    marker = new google.maps.Marker({
      position: centerPosition,
      map: map,
    });

    map.addListener("click", (e) => {
      const lat = e.latLng.lat();
      const lng = e.latLng.lng();

      document.getElementById("latitude").value = lat;
      document.getElementById("longitude").value = lng;

      if (marker) {
        marker.setMap(null);
      }

      marker = new google.maps.Marker({
        position: { lat, lng },
        map: map,
      });
    });
  }

  function initMapManually() {
    const latField = document.getElementById("latitude");
    const lngField = document.getElementById("longitude");
    const mapElement = document.getElementById("new-map");

    if (!mapElement) return; // 対象のmapが存在しないページでは無視

    const lat = parseFloat(latField?.value);
    const lng = parseFloat(lngField?.value);

    if (!isNaN(lat) && !isNaN(lng)) {
      initializeMap({ lat, lng });
    } else {
      const defaultPosition = { lat: 35.6804, lng: 139.7690 }; // 東京駅
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            initializeMap({
              lat: position.coords.latitude,
              lng: position.coords.longitude
            });
          },
          () => {
            initializeMap(defaultPosition);
          }
        );
      } else {
        initializeMap(defaultPosition);
      }
    }
  }

  // Turbo対応
  document.addEventListener("turbo:load", function () {
    if (typeof google !== "undefined" && google.maps) {
      initMapManually();
    } else {
      // maps APIが読み込まれていなければ少し待ってから再試行
      let retries = 0;
      const interval = setInterval(() => {
        if (typeof google !== "undefined" && google.maps) {
          clearInterval(interval);
          initMapManually();
        } else if (retries++ > 10) {
          clearInterval(interval);
          console.warn("Google Mapsの読み込みに失敗しました。");
        }
      }, 300);
    }
  });
</script>
